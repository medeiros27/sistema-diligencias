#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Script de build para gerar execut√°vel
"""

import subprocess
import sys
import os
import shutil

# Fallback para pathlib se n√£o estiver dispon√≠vel
try:
    from pathlib import Path
    PATHLIB_AVAILABLE = True
except ImportError:
    PATHLIB_AVAILABLE = False
    # Implementa√ß√£o b√°sica de Path para compatibilidade
    class Path:
        def __init__(self, path):
            self.path = str(path)
        
        def __str__(self):
            return self.path
        
        def __truediv__(self, other):
            return Path(os.path.join(self.path, str(other)))
        
        def exists(self):
            return os.path.exists(self.path)
        
        def mkdir(self, exist_ok=False):
            if not self.exists() or not exist_ok:
                try:
                    os.makedirs(self.path, exist_ok=exist_ok)
                except OSError:
                    pass


def check_pyinstaller():
    """Verifica se PyInstaller est√° instalado"""
    try:
        import PyInstaller
        return True
    except ImportError:
        print("üì¶ Instalando PyInstaller...")
        subprocess.check_call([sys.executable, "-m", "pip", "install", "pyinstaller"])
        return True


def build_executable():
    """Constr√≥i o execut√°vel"""
    print("üî® Construindo execut√°vel...")
    
    # Diret√≥rios
    src_dir = Path("src")
    dist_dir = Path("dist")
    build_dir = Path("build")
    assets_dir = Path("assets")
    
    # Limpar diret√≥rios anteriores
    if dist_dir.exists():
        shutil.rmtree(str(dist_dir))
    if build_dir.exists():
        shutil.rmtree(str(build_dir))
    
    # Comando PyInstaller
    cmd = [
        "pyinstaller",
        "--onefile",
        "--windowed",
        "--name=SistemaDiligencias",
        "--distpath=dist",
        "--workpath=build",
        str(src_dir / "main.py")
    ]
    
    # Adicionar √≠cone se existir
    icon_path = assets_dir / "icon.ico"
    if icon_path.exists():
        cmd.extend(["--icon", str(icon_path)])
    
    # Adicionar dados extras
    if assets_dir.exists():
        cmd.extend(["--add-data", f"{assets_dir}{os.pathsep}assets"])
    
    try:
        subprocess.check_call(cmd)
        print("‚úÖ Execut√°vel criado com sucesso!")
        return True
    except subprocess.CalledProcessError as e:
        print(f"‚ùå Erro no build: {e}")
        return False


def create_distribution():
    """Cria pacote de distribui√ß√£o"""
    print("üì¶ Criando pacote de distribui√ß√£o...")
    
    dist_dir = Path("dist")
    package_dir = dist_dir / "SistemaDiligencias_v2.0"
    
    # Criar diret√≥rio do pacote
    package_dir.mkdir(exist_ok=True)
    
    # Copiar execut√°vel
    exe_path = dist_dir / "SistemaDiligencias.exe"
    if exe_path.exists():
        shutil.copy2(str(exe_path), str(package_dir))
    
    # Copiar documenta√ß√£o
    docs = ["README.md", "INSTALL.md", "USER_MANUAL.md"]
    for doc in docs:
        doc_path = Path("docs") / doc
        if doc_path.exists():
            shutil.copy2(str(doc_path), str(package_dir))
    
    # Criar diret√≥rio de exemplos
    examples_dir = package_dir / "exemplos"
    examples_dir.mkdir(exist_ok=True)
    
    print(f"‚úÖ Pacote criado em: {package_dir}")
    return True


def main():
    """Fun√ß√£o principal de build"""
    print("üöÄ Build do Sistema de Dilig√™ncias")
    print("=" * 50)
    
    # Verificar PyInstaller
    if not check_pyinstaller():
        return 1
    
    # Build do execut√°vel
    if not build_executable():
        return 1
    
    # Criar distribui√ß√£o
    if not create_distribution():
        return 1
    
    print("\nüéâ Build conclu√≠do com sucesso!")
    print("üìÅ Arquivos dispon√≠veis em: dist/")
    return 0


if __name__ == "__main__":
    sys.exit(main())